async function scrapeNovaAutolandVehicle(url: string, dealershipId: number, dealershipName: string): Promise<InsertVehicle | null> {
  console.log(`Processing Nova Autoland vehicle: ${url}`);
  
  try {
    const headers: HeadersInit = {
      'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
      'Accept-Language': 'en-US,en;q=0.9',
      'Cache-Control': 'no-cache',
      'Pragma': 'no-cache',
      'Referer': url.includes('/') ? url.split('/').slice(0, 3).join('/') + '/inventory' : 'https://www.google.com/'
    };
    
    const response = await fetch(url, { headers, redirect: 'follow' });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch vehicle detail page: ${response.statusText}`);
    }
    
    const html = await response.text();
    const $ = cheerio.load(html);
    
    // Extract VIN
    let vin = '';
    $('*:contains("VIN")').each((_, element) => {
      const text = $(element).text();
      const vinMatch = text.match(/VIN[^\w\d]*([A-HJ-NPR-Z0-9]{17})/i);
      if (vinMatch && vinMatch[1]) {
        vin = vinMatch[1];
      }
    });
    
    // Check for VIN in data attributes
    if (!vin) {
      $('[data-vin], [vin], [id*="vin"], [class*="vin"], [itemprop*="vehicleIdentificationNumber"]').each((_, element) => {
        const attrVin = $(element).attr('data-vin') || 
                      $(element).attr('vin') || 
                      $(element).attr('itemprop') || 
                      $(element).text().trim();
                      
        if (attrVin && /^[A-HJ-NPR-Z0-9]{17}$/i.test(attrVin)) {
          vin = attrVin;
        }
      });
    }
    
    // If still no VIN, look in URL
    if (!vin) {
      const urlVinMatch = url.match(/([A-HJ-NPR-Z0-9]{17})/i);
      if (urlVinMatch && urlVinMatch[1]) {
        vin = urlVinMatch[1];
      }
    }
    
    // If no VIN found, extract ID from URL to use as a unique identifier
    if (!vin) {
      const urlIdMatch = url.match(/\/(\d+)(?:\/|$)/);
      if (urlIdMatch && urlIdMatch[1]) {
        // Use the ID as part of a generated VIN
        vin = `NOVAAUTOVA${urlIdMatch[1].padStart(8, '0')}12345`.slice(0, 17);
        console.log(`No VIN found, using URL ID to create identifier: ${vin}`);
      } else {
        // Generate a VIN-like identifier based on the URL
        const urlHash = url.split('').reduce((a, b) => {
          a = (a << 5) - a + b.charCodeAt(0);
          return a & a;
        }, 0);
        const randomDigits = Math.floor(Math.random() * 10000000).toString().padStart(7, '0');
        vin = `NOVAAUTOVA${Math.abs(urlHash).toString(16).slice(0, 6)}${randomDigits}`.slice(0, 17);
        console.log(`No VIN found, using generated identifier: ${vin}`);
      }
    }
    
    // Vehicle basic info
    let make = '';
    let model = '';
    let year = 0;
    let price = 0;
    let mileage = 0;
    let title = '';
    let images: string[] = [];
    
    // Extract title - look in common heading elements
    const titleSelectors = [
      'h1.vehicle-title', 'h1.detail-title', 'h1.listing-title',
      'h1', 'h2.vehicle-title', 'h2.detail-title', '.vehicle-title',
      '.detail-title', '.page-title', '.listing-title', '.vehicle-header h1',
      '.vehicle-header-title', '.vehicle-name', '.car-title',
      '.details-title', '.inventory-title', '.detail-vehicle-title',
      '.vdp-vehicle-title', '.title', '.vehicle-headline', 
      '[itemprop="name"]', '.main-vehicle-info h1'
    ];
    
    for (const selector of titleSelectors) {
      const element = $(selector).first();
      if (element.length && element.text().trim()) {
        title = element.text().trim();
        console.log(`Found title with selector ${selector}: ${title}`);
        break;
      }
    }
    
    // If still no title, try meta title or OG title
    if (!title) {
      title = $('meta[property="og:title"]').attr('content') || 
              $('meta[name="title"]').attr('content') ||
              $('title').text().trim();
      
      // Clean up title if it contains the dealership name
      title = title.replace(/ [-|] Nova Autoland.*$/i, '')
                   .replace(/ [-|] Used.*$/i, '')
                   .replace(/ [-|] For Sale.*$/i, '')
                   .trim();
      console.log(`Using meta title: ${title}`);
    }
    
    // Extract year, make, model from title
    if (title) {
      const yearMatch = title.match(/(\d{4})\s+(.+)/i);
      if (yearMatch && yearMatch[1] && yearMatch[2]) {
        const potentialYear = parseInt(yearMatch[1], 10);
        if (!isNaN(potentialYear) && potentialYear > 1900 && potentialYear < 2026) {
          year = potentialYear;
          
          // Split the rest by spaces to get make and model
          const restParts = yearMatch[2].trim().split(/\s+/);
          if (restParts.length >= 1) {
            make = restParts[0];
            
            if (restParts.length >= 2) {
              model = restParts.slice(1).join(' ');
            }
          }
        }
      }
    }
    
    // Try to find structured data
    const structuredData = $('script[type="application/ld+json"]');
    let jsonLdData = null;
    
    structuredData.each((_, script) => {
      const content = $(script).html();
      if (content) {
        try {
          const parsed = JSON.parse(content);
          if (parsed && (parsed['@type'] === 'Vehicle' || parsed['@type'] === 'Car' || 
              parsed['@type'] === 'Product' || parsed['@type'] === 'AutoDealer')) {
            jsonLdData = parsed;
          }
        } catch (e) {
          console.log('Error parsing JSON-LD data');
        }
      }
    });
    
    if (jsonLdData) {
      if (jsonLdData.name && !title) {
        title = jsonLdData.name;
      }
      
      if (jsonLdData.brand && !make) {
        make = typeof jsonLdData.brand === 'string' ? jsonLdData.brand : jsonLdData.brand.name;
      }
      
      if (jsonLdData.model && !model) {
        model = jsonLdData.model;
      }
      
      if (jsonLdData.vehicleModelDate && !year) {
        year = parseInt(jsonLdData.vehicleModelDate, 10);
      }
      
      if (jsonLdData.offers && jsonLdData.offers.price && !price) {
        price = parseInt(jsonLdData.offers.price, 10);
      }
      
      if (jsonLdData.mileageFromOdometer && !mileage) {
        if (typeof jsonLdData.mileageFromOdometer === 'object' && jsonLdData.mileageFromOdometer.value) {
          mileage = parseInt(jsonLdData.mileageFromOdometer.value, 10);
        } else {
          mileage = parseInt(jsonLdData.mileageFromOdometer, 10);
        }
      }
    }
    
    // Look for specific elements that might contain make, model, year
    if (!make || !model || !year) {
      $('.detail-value, .spec-value, .vehicle-details li, .vehicle-info li, .specs-table td, [itemprop="brand"], [itemprop="model"], [itemprop="modelDate"]').each((_, elem) => {
        const text = $(elem).text().trim().toLowerCase();
        
        if (text.includes('make') && text.includes(':')) {
          const makeParts = text.split(':');
          if (makeParts.length > 1 && !make) {
            make = makeParts[1].trim();
          }
        }
        
        if (text.includes('model') && text.includes(':')) {
          const modelParts = text.split(':');
          if (modelParts.length > 1 && !model) {
            model = modelParts[1].trim();
          }
        }
        
        if (text.includes('year') && text.includes(':')) {
          const yearParts = text.split(':');
          if (yearParts.length > 1 && !year) {
            const parsedYear = parseInt(yearParts[1].trim(), 10);
            if (!isNaN(parsedYear) && parsedYear > 1900 && parsedYear < 2026) {
              year = parsedYear;
            }
          }
        }
      });
    }
    
    // Extract data from specific elements with special attributes
    if (!make && $('[itemprop="brand"]').length) {
      make = $('[itemprop="brand"]').text().trim();
    }
    
    if (!model && $('[itemprop="model"]').length) {
      model = $('[itemprop="model"]').text().trim();
    }
    
    if (!year && $('[itemprop="modelDate"]').length) {
      const yearText = $('[itemprop="modelDate"]').text().trim();
      const parsedYear = parseInt(yearText, 10);
      if (!isNaN(parsedYear) && parsedYear > 1900 && parsedYear < 2026) {
        year = parsedYear;
      }
    }
    
    // Extract price from multiple potential locations
    const priceSelectors = [
      '.price', '.vehicle-price', '.listing-price', '.details-price',
      '[class*="price"]', '[data-price]', '[itemprop="price"]',
      'strong:contains("$")', '.detail-value:contains("$")',
      '.price-value', '.msrp', '.sale-price', '.vehicle-cost',
      '.cost', '.asking-price', '.finance-price', '.final-price',
      '.primary-price', '.main-price', '.current-price'
    ];
    
    for (const selector of priceSelectors) {
      const priceElements = $(selector);
      
      priceElements.each((_, elem) => {
        const text = $(elem).text().trim();
        const priceMatch = text.match(/\$?([0-9,]+)/);
        
        if (priceMatch && priceMatch[1]) {
          const parsedPrice = parseInt(priceMatch[1].replace(/,/g, ''), 10);
          if (!isNaN(parsedPrice) && parsedPrice > 100) {
            price = parsedPrice;
            console.log(`Found price: $${price}`);
            return false; // Break the loop
          }
        }
      });
      
      if (price > 0) break;
    }
    
    // Check for price in content attribute
    if (price === 0) {
      $('[content]').each((_, elem) => {
        const content = $(elem).attr('content') || '';
        const priceMatch = content.match(/\$?([0-9,]+)/);
        
        if (priceMatch && priceMatch[1]) {
          const parsedPrice = parseInt(priceMatch[1].replace(/,/g, ''), 10);
          if (!isNaN(parsedPrice) && parsedPrice > 100) {
            price = parsedPrice;
            console.log(`Found price from content attribute: $${price}`);
            return false; // Break the loop
          }
        }
      });
    }
    
    // If still no price, search the whole page for price patterns
    if (price === 0) {
      const priceElements = $('*:contains("Price"), *:contains("PRICE"), *:contains("$")');
      priceElements.each((_, element) => {
        const text = $(element).text().trim();
        const priceMatch = text.match(/(?:Price|Price:|PRICE|PRICE:)[^\$]*[$](\d{1,3}(?:,\d{3})*)/i) || 
                            text.match(/[$](\d{1,3}(?:,\d{3})*)/);
        
        if (priceMatch && priceMatch[1]) {
          const parsedPrice = parseInt(priceMatch[1].replace(/,/g, ''), 10);
          if (!isNaN(parsedPrice) && parsedPrice > 100) {
            price = parsedPrice;
            console.log(`Found price from text: $${price}`);
            return false; // Break the loop
          }
        }
      });
    }
    
    // Extract mileage from multiple potential locations
    const mileageSelectors = [
      '[class*="mileage"]', '.odometer', '.miles', '[class*="miles"]', 
      '.vehicle-miles', '.detail-value:contains("miles")', '.detail-value:contains("mi.")',
      '[data-mileage]', '[itemprop="mileageFromOdometer"]',
      '.detail-row:contains("Mileage")', '.specs-table:contains("Mileage")',
      '.odometer-reading', '.vehicle-odometer', '.detail-specification:contains("Mileage")'
    ];
    
    for (const selector of mileageSelectors) {
      const mileageElements = $(selector);
      
      mileageElements.each((_, elem) => {
        const text = $(elem).text().trim();
        const mileageMatch = text.match(/(\d{1,3}(?:,\d{3})*)\s*(?:mi|miles)/i) || 
                           text.match(/Mileage:?\s*(\d{1,3}(?:,\d{3})*)/i);
        
        if (mileageMatch && mileageMatch[1]) {
          const parsedMileage = parseInt(mileageMatch[1].replace(/,/g, ''), 10);
          if (!isNaN(parsedMileage) && parsedMileage > 0) {
            mileage = parsedMileage;
            console.log(`Found mileage: ${mileage} miles`);
            return false; // Break the loop
          }
        }
      });
      
      if (mileage > 0) break;
    }
    
    // Check for mileage in content attribute
    if (mileage === 0) {
      $('[content]').each((_, elem) => {
        const content = $(elem).attr('content') || '';
        const mileageMatch = content.match(/(\d{1,3}(?:,\d{3})*)\s*(?:mi|miles)/i);
        
        if (mileageMatch && mileageMatch[1]) {
          const parsedMileage = parseInt(mileageMatch[1].replace(/,/g, ''), 10);
          if (!isNaN(parsedMileage) && parsedMileage > 0) {
            mileage = parsedMileage;
            console.log(`Found mileage from content attribute: ${mileage} miles`);
            return false; // Break the loop
          }
        }
      });
    }
    
    // If mileage is zero, search whole page for mileage patterns
    if (mileage === 0) {
      const mileageElements = $('*:contains("Mileage"), *:contains("MILEAGE"), *:contains("Miles"), *:contains("MILES"), *:contains("Odometer"), *:contains("ODOMETER")');
      mileageElements.each((_, element) => {
        const text = $(element).text().trim();
        const mileageMatch = text.match(/(?:Mileage|Mileage:|MILEAGE|MILEAGE:|Miles|Miles:|MILES|MILES:|Odometer|Odometer:)[^\d]*(\d{1,3}(?:,\d{3})*)/i);
        
        if (mileageMatch && mileageMatch[1]) {
          const parsedMileage = parseInt(mileageMatch[1].replace(/,/g, ''), 10);
          if (!isNaN(parsedMileage) && parsedMileage > 0 && parsedMileage < 500000) {
            mileage = parsedMileage;
            console.log(`Found mileage from text: ${mileage} miles`);
            return false; // Break the loop
          }
        }
      });
    }
    
    // If mileage is still zero, estimate based on year
    if (mileage === 0 && year > 0) {
      const currentYear = new Date().getFullYear();
      const age = currentYear - year;
      // Average 12,000 miles per year
      mileage = age * 12000;
      if (mileage <= 0) mileage = 5000; // Minimum for very new cars
      console.log(`Estimated mileage based on year: ${mileage} miles`);
    } else if (mileage === 0) {
      // Default mileage if we can't estimate
      mileage = 75000;
      console.log(`Using default mileage: ${mileage} miles`);
    }
    
    // Extract images - Nova Autoland often uses lazy loading for images
    const imageSelectors = [
      '.vehicle-images img', '.detail-images img', '.carousel img', 
      '.slider img', '.gallery img', '.vehicle-gallery img',
      '[data-src]', '[data-gallery]', '.detail-slides img',
      'img[src*="vehicle"], img[src*="inventory"], img[src*="car"]',
      '.photo-links img', '.vehicle-photo img', '.photo img',
      '.thumbnail img', '.image-gallery img', '.car-images img',
      '.listing-photo img', '.listing-vehicle img', 
      '.vehicle-media img', '.media-gallery img', '[data-lazy]',
      '.vdp-gallery img', '[data-srcset]', '[srcset]',
      // Nova Autoland specific selectors
      '.carousel-inner img', '.slider-image img', 'a.fancybox img',
      '.vehicle-detail-photo img', '.photo-section img', '.slick-slide img',
      '.vehicle-details-slider img', '.bxslider img', '.imageViewerImages img',
      '.vehicle-photo-container img', '.i19r-main-img', '.stock-photos img', '.card-img',
      '.card img', '.inventory-img', '.slick-track img', '.slide img',
      '.dcs-media img', '.inventory-list-photo img', '.dcs-photo img'
    ];
    
    for (const selector of imageSelectors) {
      const imgElements = $(selector);
      
      if (imgElements.length > 0) {
        imgElements.each((_, img) => {
          // Check all possible sources of image URLs
          let imgSrc = $(img).attr('src') || 
                     $(img).attr('data-src') || 
                     $(img).attr('data-lazy') || 
                     $(img).attr('data-original') || 
                     $(img).attr('data-srcset')?.split(' ')[0] || 
                     $(img).attr('srcset')?.split(' ')[0] || 
                     '';
          
          // Check for lazy loading patterns
          if (!imgSrc || imgSrc.includes('placeholder') || imgSrc.includes('blank.gif') || imgSrc.includes('loading')) {
            imgSrc = $(img).attr('data-src') || 
                   $(img).attr('data-lazy') || 
                   $(img).attr('data-original') || 
                   $(img).attr('data-img') || 
                   $(img).attr('data-image') || 
                   $(img).attr('data-full') || 
                   $(img).attr('data-srcset')?.split(' ')[0] || 
                   '';
          }
          
          if (imgSrc && !imgSrc.includes('placeholder') && !imgSrc.includes('blank.gif') && !imgSrc.includes('loading')) {
            try {
              const absoluteImgUrl = new URL(imgSrc, url).toString();
              if (!images.includes(absoluteImgUrl) && 
                  !absoluteImgUrl.includes('logo') && 
                  !absoluteImgUrl.includes('banner') && 
                  !absoluteImgUrl.includes('icon')) {
                images.push(absoluteImgUrl);
              }
            } catch (e) {
              console.log(`Invalid image URL: ${imgSrc}`);
            }
          }
        });
      }
      
      if (images.length > 0) break;
    }
    
    // Check for images in JSON data (common in modern car sites)
    if (images.length === 0) {
      $('script').each((_, script) => {
        const content = $(script).html() || '';
        
        if (content.includes('"images"') || content.includes('"photos"') || content.includes('"gallery"')) {
          try {
            // Look for JSON data in various formats
            const jsonMatch = content.match(/(?:window\.[a-zA-Z0-9_]+=|var [a-zA-Z0-9_]+=)\s*({.+});?/);
            if (jsonMatch && jsonMatch[1]) {
              const jsonData = JSON.parse(jsonMatch[1]);
              
              // Extract images from various possible structures
              const extractedImages = jsonData.images || 
                                   jsonData.photos || 
                                   jsonData.gallery || 
                                   jsonData.vehicle?.images || 
                                   jsonData.data?.images || 
                                   [];
              
              if (Array.isArray(extractedImages)) {
                extractedImages.forEach((img) => {
                  let imgUrl = '';
                  if (typeof img === 'string') {
                    imgUrl = img;
                  } else if (img.url) {
                    imgUrl = img.url;
                  } else if (img.src) {
                    imgUrl = img.src;
                  } else if (img.large) {
                    imgUrl = img.large;
                  } else if (img.path) {
                    imgUrl = img.path;
                  }
                  
                  if (imgUrl) {
                    try {
                      const absoluteImgUrl = new URL(imgUrl, url).toString();
                      if (!images.includes(absoluteImgUrl)) {
                        images.push(absoluteImgUrl);
                      }
                    } catch (e) {
                      console.log(`Invalid image URL from JSON: ${imgUrl}`);
                    }
                  }
                });
              }
            }
          } catch (e) {
            // Ignore JSON parsing errors
          }
        }
      });
    }
    
    // Ensure we have reasonable values
    if (!make) make = 'Unknown';
    if (!model) model = 'Vehicle';
    if (year === 0) year = new Date().getFullYear() - 3; // Use a realistic year
    
    // Ensure price is realistic
    if (price === 0) price = 12995; // Default price
    
    // Create vehicle object
    const vehicle: InsertVehicle = {
      title: title || `${year} ${make} ${model}`,
      price,
      year,
      make,
      model,
      mileage,
      vin,
      location: 'Nova Autoland, VA',
      zipCode: '20151',
      dealershipId,
      images,
      carfaxUrl: null,
      contactUrl: null,
      originalListingUrl: url,
      sortOrder: 0
    };
    
    // For Nova Autoland, we want to be aggressive about image extraction
    if (images.length < 5) { // Only enhance extraction if we need more images
      // Apply a more thorough extraction approach specific to Nova Autoland
      console.log(`Attempting enhanced image extraction for Nova Autoland vehicle: ${make} ${model}`);
      
      // First try the dealer-specific image containers that are most common on Nova Autoland
      const novaSpecificSelectors = [
        '.dcs-media-viewer img', '.dcs-gallery img', '.lightbox-image img',
        '.photo-gallery img', '.gallery-image img', '.thumbnail-container img',
        'a[href*=".jpg"] img', 'a[href*=".jpeg"] img', 'a[href*=".png"] img',
        'img[src*="dealercarsearch"]', 'img[src*="imagescdn"]',
        // Any tag with image-related URLs
        '[src*="photos"]', '[src*="images"]', '[src*="pictures"]', '[src*="gallery"]',
        '[data-src*="photos"]', '[data-src*="images"]', '[data-src*="pictures"]',
        '.thumbnail img', '.thumbnails img'
      ];
      
      for (const selector of novaSpecificSelectors) {
        const elements = $(selector);
        if (elements.length > 0) {
          console.log(`Found ${elements.length} elements with Nova-specific selector: ${selector}`);
          
          elements.each((_, elem) => {
            // Check all possible sources of image URLs
            let imgSrc = $(elem).attr('src') || 
                       $(elem).attr('data-src') || 
                       $(elem).attr('data-lazy') || 
                       $(elem).attr('data-original') || 
                       $(elem).attr('data-srcset')?.split(' ')[0] || 
                       $(elem).attr('srcset')?.split(' ')[0] || 
                       '';
            
            // If the element is inside an anchor, also check the anchor's href
            const parentAnchor = $(elem).closest('a');
            if (parentAnchor.length && (!imgSrc || imgSrc.includes('placeholder') || imgSrc.includes('blank.gif'))) {
              const href = parentAnchor.attr('href') || '';
              if (href && (href.endsWith('.jpg') || href.endsWith('.jpeg') || href.endsWith('.png'))) {
                imgSrc = href;
              }
            }
            
            if (imgSrc && !imgSrc.includes('placeholder') && !imgSrc.includes('blank.gif') && !imgSrc.includes('loading')) {
              try {
                const absoluteImgUrl = new URL(imgSrc, url).toString();
                if (!images.includes(absoluteImgUrl) && 
                    !absoluteImgUrl.includes('logo') && 
                    !absoluteImgUrl.includes('banner') && 
                    !absoluteImgUrl.includes('icon')) {
                  images.push(absoluteImgUrl);
                  console.log(`Found Nova Autoland image: ${absoluteImgUrl}`);
                }
              } catch (error) {
                console.log(`Invalid image URL: ${imgSrc}`);
              }
            }
          });
        }
      }
      
      // Also look for direct links to full-size images (common in Nova Autoland's lightbox implementations)
      $('a').each((_, elem) => {
        const href = $(elem).attr('href') || '';
        if (href && (
            href.includes('/photos/') || 
            href.includes('/images/') || 
            href.includes('.jpg') || 
            href.includes('.jpeg') || 
            href.includes('.png')
          ) && !href.includes('logo') && !href.includes('banner')) {
          
          try {
            const absoluteImgUrl = new URL(href, url).toString();
            if (!images.includes(absoluteImgUrl)) {
              images.push(absoluteImgUrl);
              console.log(`Found Nova Autoland image from anchor: ${absoluteImgUrl}`);
            }
          } catch (error) {
            console.log(`Invalid image URL from anchor: ${href}`);
          }
        }
      });
      
      // Look for elements that might contain images with non-standard attributes
      const possibleImageElements = $('.vehicle-details img, .vehicle-gallery img, .slider-container img, .image-carousel img, a.fancybox, a.lightbox');
      
      possibleImageElements.each((_, elem) => {
        let imgSrc = '';
        
        // If it's an anchor tag with an href that points to an image
        if (elem.tagName.toLowerCase() === 'a') {
          imgSrc = $(elem).attr('href') || '';
          
          // Check if href is an image URL
          if (imgSrc && (imgSrc.endsWith('.jpg') || imgSrc.endsWith('.jpeg') || 
              imgSrc.endsWith('.png') || imgSrc.endsWith('.webp') || 
              imgSrc.includes('image') || imgSrc.includes('photo'))) {
            try {
              const absoluteImgUrl = new URL(imgSrc, url).toString();
              if (!images.includes(absoluteImgUrl)) {
                images.push(absoluteImgUrl);
                console.log(`Found image via anchor href: ${absoluteImgUrl}`);
              }
            } catch (error) {
              console.log(`Invalid image URL from anchor: ${imgSrc}`);
            }
          }
        } else {
          // For img tags check additional data attributes
          imgSrc = $(elem).attr('data-vehicle-image') || 
                 $(elem).attr('data-full-image') || 
                 $(elem).attr('data-large-image') || 
                 $(elem).attr('data-url') || 
                 $(elem).attr('data-big') || 
                 $(elem).attr('data-zoom-image') || 
                 $(elem).attr('data-lightbox') || 
                 '';
                 
          if (imgSrc) {
            try {
              const absoluteImgUrl = new URL(imgSrc, url).toString();
              if (!images.includes(absoluteImgUrl)) {
                images.push(absoluteImgUrl);
                console.log(`Found image via data attribute: ${absoluteImgUrl}`);
              }
            } catch (error) {
              console.log(`Invalid image URL from data attribute: ${imgSrc}`);
            }
          }
        }
      });
    }
      
      // If we still don't have images, try to find javascript variables that might contain image URLs
      if (images.length < 2) {
        $('script').each((_, script) => {
          const scriptContent = $(script).html() || '';
          
          // Look for common image array patterns in JavaScript
          if (scriptContent.includes('var images') || scriptContent.includes('var photos') || 
              scriptContent.includes('vehicleImages') || scriptContent.includes('galleryImages')) {
            
            // Try to extract image arrays from JavaScript
            const matches = scriptContent.match(/var\s+(?:images|photos|vehicleImages|galleryImages)\s*=\s*(\[.*?\]);/s);
            if (matches && matches[1]) {
              try {
                const imageArray = JSON.parse(matches[1].replace(/'/g, '"'));
                
                if (Array.isArray(imageArray)) {
                  imageArray.forEach(img => {
                    let imgUrl = '';
                    if (typeof img === 'string') {
                      imgUrl = img;
                    } else if (img && typeof img === 'object') {
                      imgUrl = img.url || img.src || img.path || img.large || '';
                    }
                    
                    if (imgUrl) {
                      try {
                        const absoluteImgUrl = new URL(imgUrl, url).toString();
                        if (!images.includes(absoluteImgUrl)) {
                          images.push(absoluteImgUrl);
                          console.log(`Found image via JavaScript variable: ${absoluteImgUrl}`);
                        }
                      } catch (e) {
                        console.log(`Invalid image URL from JavaScript: ${imgUrl}`);
                      }
                    }
                  });
                }
              } catch (e) {
                // Ignore JSON parsing errors
                console.log(`Error parsing JavaScript image array: ${e.message}`);
              }
            }
          }
          
          // Nova Autoland specific image extraction from script content
          // Look for image URLs directly in the HTML
          const imgRegex = /(https?:\/\/[^"'\s]+\.(?:jpg|jpeg|png|gif|webp))/ig;
          const imgMatches = scriptContent.match(imgRegex);
          
          if (imgMatches) {
            imgMatches.forEach(imgUrl => {
              if (!images.includes(imgUrl) && 
                  !imgUrl.includes('logo') && 
                  !imgUrl.includes('banner') && 
                  !imgUrl.includes('icon')) {
                images.push(imgUrl);
                console.log(`Found Nova Autoland image URL in script: ${imgUrl}`);
              }
            });
          }
        });
      }
      
      // Nova Autoland: Special dealer-specific image extraction for URLs with format /vdp/ID/
      if (images.length < 2 && url.includes('/vdp/')) {
        // Extract the vehicle ID from URL
        const idMatch = url.match(/\/vdp\/(\d+)\//);
        if (idMatch && idMatch[1]) {
          const vehicleId = idMatch[1];
          
          // Try common image URL patterns based on vehicle ID
          const potentialPatterns = [
            `https://novaautoland.com/photos/${vehicleId}/1.jpg`,
            `https://photos.dealercarsearch.com/Media/NovaAutoland/${vehicleId}/1.jpg`,
            `https://images.dealercarsearch.com/Media/NovaAutoland/${vehicleId}/1.jpg`,
            `https://imagescdn.dealercarsearch.com/Media/NovaAutoland/${vehicleId}/1.jpg`
          ];
          
          for (const pattern of potentialPatterns) {
            if (!images.includes(pattern)) {
              images.push(pattern);
              console.log(`Added potential Nova Autoland image from pattern: ${pattern}`);
            }
          }
        }
      }
    }
    
    // Store the current images in the vehicle object
    const vehicle: InsertVehicle = {
      title: title || `${year} ${make} ${model}`,
      price,
      year,
      make,
      model,
      mileage,
      vin,
      location: 'Nova Autoland, VA',
      zipCode: '20151',
      dealershipId,
      images,
      carfaxUrl: null,
      contactUrl: null,
      originalListingUrl: url,
      sortOrder: 0
    };
    
    console.log(`Successfully scraped Nova Autoland vehicle: ${year} ${make} ${model} with price $${price} and mileage ${mileage}`);
    console.log(`Found ${images.length} images for vehicle`);
    return vehicle;
    
  } catch (error) {
    console.error(`Error processing Nova Autoland vehicle: ${error}`);
    return null;
  }
}

// Specialized function for Limitless Auto
async function scrapeLimitlessAuto(dealershipUrl: string, dealershipId: number, dealershipName: string): Promise<InsertVehicle[]> {
  console.log(`Starting specialized Limitless Auto scraper for: ${dealershipUrl}`);
  
  // Clean URL of any query parameters
  if (dealershipUrl.includes('?')) {
    dealershipUrl = dealershipUrl.split('?')[0];
  }
  
  // Use the correct URL format for Limitless Auto
  let inventoryUrl = dealershipUrl;
  
  // Clean up the base URL - remove trailing slashes and any query parameters
  dealershipUrl = dealershipUrl.replace(/\/+$/, ''); // Remove trailing slashes
  
  // The correct URL format for Limitless Auto inventory is /cars-for-sale
  inventoryUrl = `${dealershipUrl}/cars-for-sale`;
  console.log(`Using correct Limitless Auto URL format: ${inventoryUrl}`);
  
  // If the URL has changed (they're now using limitlessautosale.com instead of limitlessauto.net)
  if (dealershipUrl.includes('limitlessauto.net') && !dealershipUrl.includes('limitlessautosale.com')) {
    // Update to the new domain
    inventoryUrl = inventoryUrl.replace('limitlessauto.net', 'limitlessautosale.com');
    console.log(`Updating to new domain: ${inventoryUrl}`);
  }
