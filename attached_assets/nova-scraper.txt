import { InsertVehicle } from '@shared/schema';
import * as cheerio from 'cheerio';

// Configuration for Nova Autoland scraper
const NOVA_AUTOLAND_CONFIG = {
  baseUrl: 'https://novaautoland.com',
  inventoryPath: '/inventory?clearall=1',
  maxPagesToScrape: 20,
  requestTimeout: 10000, // 10 seconds
  userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
  headers: {
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
    'Accept-Language': 'en-US,en;q=0.9',
    'Cache-Control': 'no-cache',
    'Pragma': 'no-cache',
    'Referer': 'https://www.google.com/'
  }
};

export async function scrapeNovaAutoland(): Promise<InsertVehicle[]> {
  try {
    console.log(`Starting scrape of Nova Autoland inventory`);
    
    const inventoryUrl = new URL(NOVA_AUTOLAND_CONFIG.inventoryPath, NOVA_AUTOLAND_CONFIG.baseUrl).toString();
    const vehicleUrls = await getAllVehicleUrls(inventoryUrl);
    
    console.log(`Found ${vehicleUrls.length} vehicle listings`);
    
    const vehicles: InsertVehicle[] = [];
    for (const url of vehicleUrls) {
      try {
        console.log(`Scraping vehicle listing: ${url}`);
        const vehicle = await scrapeVehicleDetails(url);
        if (vehicle) {
          vehicles.push(vehicle);
          console.log(`Successfully scraped vehicle: ${vehicle.make} ${vehicle.model} (${vehicle.year})`);
        }
      } catch (error) {
        console.error(`Error processing vehicle listing: ${error}`);
      }
    }
    
    console.log(`Finished scraping ${vehicles.length} vehicles from Nova Autoland`);
    return vehicles;
  } catch (error) {
    console.error(`Error scraping Nova Autoland:`, error);
    return [];
  }
}

async function getAllVehicleUrls(inventoryUrl: string): Promise<string[]> {
  const vehicleUrls: string[] = [];
  const visitedPages = new Set<string>();
  let currentPageUrl = inventoryUrl;
  
  do {
    try {
      console.log(`Fetching inventory page: ${currentPageUrl}`);
      const response = await fetchWithRetry(currentPageUrl);
      const html = await response.text();
      const $ = cheerio.load(html);
      
      // Extract vehicle URLs from current page
      extractVehicleUrlsFromPage($, NOVA_AUTOLAND_CONFIG.baseUrl, vehicleUrls);
      
      // Find next page URL
      const nextPageUrl = findNextPageUrl($, currentPageUrl);
      
      // Mark this page as visited
      visitedPages.add(currentPageUrl);
      
      if (nextPageUrl && !visitedPages.has(nextPageUrl) {
        currentPageUrl = nextPageUrl;
      } else {
        currentPageUrl = ''; // No more pages
      }
      
      // Stop if we've reached the maximum pages to scrape
      if (visitedPages.size >= NOVA_AUTOLAND_CONFIG.maxPagesToScrape) {
        console.log(`Reached maximum pages to scrape (${NOVA_AUTOLAND_CONFIG.maxPagesToScrape})`);
        break;
      }
    } catch (error) {
      console.error(`Error processing inventory page ${currentPageUrl}:`, error);
      break;
    }
  } while (currentPageUrl);
  
  return vehicleUrls;
}

async function fetchWithRetry(url: string, retries = 3): Promise<Response> {
  try {
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), NOVA_AUTOLAND_CONFIG.requestTimeout);
    
    const response = await fetch(url, {
      headers: {
        ...NOVA_AUTOLAND_CONFIG.headers,
        'User-Agent': NOVA_AUTOLAND_CONFIG.userAgent
      },
      signal: controller.signal
    });
    
    clearTimeout(timeout);
    return response;
  } catch (error) {
    if (retries > 0) {
      console.log(`Retrying fetch for ${url} (${retries} retries left)`);
      await new Promise(resolve => setTimeout(resolve, 1000));
      return fetchWithRetry(url, retries - 1);
    }
    throw error;
  }
}

function extractVehicleUrlsFromPage($: cheerio.Root, baseUrl: string, vehicleUrls: string[]): void {
  // Nova Autoland uses specific selectors for vehicle items
  const vehicleItems = $('.inventory-container, .inventory-item, .vehicle-item');
  
  vehicleItems.each((_, element) => {
    const vehicleLink = $(element).find('a[href*="/inventory/"], a[href*="/vehicle/"]').first();
    const href = vehicleLink.attr('href');
    
    if (href) {
      try {
        const absoluteUrl = new URL(href, baseUrl).toString();
        if (!vehicleUrls.includes(absoluteUrl)) {
          vehicleUrls.push(absoluteUrl);
          console.log(`Found vehicle: ${absoluteUrl}`);
        }
      } catch (e) {
        console.log(`Invalid vehicle URL: ${href}`);
      }
    }
  });
}

function findNextPageUrl($: cheerio.Root, currentPageUrl: string): string | null {
  // Nova Autoland uses a specific pagination pattern
  const paginationLinks = $('.pagination a, .page-item a, a[href*="page="]');
  let nextPageUrl: string | null = null;
  
  paginationLinks.each((_, element) => {
    const href = $(element).attr('href');
    const text = $(element).text().toLowerCase().trim();
    
    if (href && (text.includes('next') || /page \d+/i.test(text))) {
      try {
        const url = new URL(href, NOVA_AUTOLAND_CONFIG.baseUrl).toString();
        if (url !== currentPageUrl) {
          nextPageUrl = url;
          return false; // Break the loop
        }
      } catch (e) {
        console.log(`Invalid pagination URL: ${href}`);
      }
    }
  });
  
  return nextPageUrl;
}

async function scrapeVehicleDetails(url: string): Promise<InsertVehicle | null> {
  try {
    const response = await fetchWithRetry(url);
    if (!response.ok) {
      throw new Error(`Failed to fetch vehicle page: ${response.statusText}`);
    }
    
    const html = await response.text();
    const $ = cheerio.load(html);
    
    // Extract VIN
    const vin = extractVin($, url);
    if (!vin) {
      console.log(`No VIN found for vehicle at ${url}, skipping`);
      return null;
    }
    
    // Extract basic vehicle info
    const { make, model, year } = extractMakeModelYear($);
    const price = extractPrice($);
    const mileage = extractMileage($);
    const { exteriorColor, interiorColor } = extractColors($);
    const { bodyType, fuelType, transmission, drivetrain } = extractTechnicalDetails($);
    const description = extractDescription($);
    const imageUrls = extractImages($, url);
    const carfaxUrl = extractCarfaxUrl($, url);
    
    // Construct the vehicle object
    const vehicle: InsertVehicle = {
      title: `${year} ${make} ${model}`.trim(),
      dealershipId: 0, // You can set this as needed
      vin,
      make,
      model,
      year,
      price,
      mileage,
      location: 'Chantilly, VA',
      zipCode: '20152',
      images: imageUrls,
      carfaxUrl: carfaxUrl || undefined,
      contactUrl: url, // Using the listing URL as contact URL
      originalListingUrl: url
    };
    
    return vehicle;
  } catch (error) {
    console.error(`Error scraping vehicle details from ${url}:`, error);
    return null;
  }
}

function extractVin($: cheerio.Root, url: string): string | null {
  // Method 1: Look for VIN in visible text
  let vin = findVinInText($);
  
  // Method 2: Look for VIN in various common attributes
  if (!vin) {
    vin = findVinInAttributes($);
  }
  
  // Method 3: Search in meta tags
  if (!vin) {
    vin = findVinInMetaTags($);
  }
  
  // Method 4: Look for VIN in URL
  if (!vin) {
    const urlVinMatch = url.match(/([A-HJ-NPR-Z0-9]{17})/i);
    if (urlVinMatch && urlVinMatch[1]) {
      vin = urlVinMatch[1];
    }
  }
  
  return vin;
}

function findVinInText($: cheerio.Root): string | null {
  let foundVin: string | null = null;
  
  $('*:contains("VIN")').each((_, element) => {
    if (foundVin) return;
    
    const text = $(element).text();
    const vinMatch = text.match(/VIN[^\w\d]*([A-HJ-NPR-Z0-9]{17})/i);
    if (vinMatch && vinMatch[1]) {
      foundVin = vinMatch[1];
    }
  });
  
  return foundVin;
}

function findVinInAttributes($: cheerio.Root): string | null {
  let foundVin: string | null = null;
  
  $('[data-vin], [vin], [id*="vin"], [class*="vin"], [itemprop="vehicleIdentificationNumber"]').each((_, element) => {
    if (foundVin) return;
    
    const attrVin = $(element).attr('data-vin') || 
                   $(element).attr('vin') || 
                   $(element).text().trim();
    
    if (attrVin && /^[A-HJ-NPR-Z0-9]{17}$/i.test(attrVin)) {
      foundVin = attrVin;
    }
  });
  
  return foundVin;
}

function findVinInMetaTags($: cheerio.Root): string | null {
  let foundVin: string | null = null;
  
  $('meta').each((_, element) => {
    if (foundVin) return;
    
    const content = $(element).attr('content') || '';
    const vinMatch = content.match(/([A-HJ-NPR-Z0-9]{17})/i);
    if (vinMatch && vinMatch[1]) {
      foundVin = vinMatch[1];
    }
  });
  
  return foundVin;
}

function extractMakeModelYear($: cheerio.Root): { make: string; model: string; year: number } {
  let title = '';
  let make = '';
  let model = '';
  let year = 0;
  
  // Extract title from Nova Autoland's specific structure
  const titleElement = $('h1.vehicle-title, .vehicle-name, [itemprop="name"]').first();
  title = titleElement.text().trim();
  
  // If no title found, check meta tags
  if (!title) {
    $('meta[property="og:title"], meta[name="title"]').each((_, element) => {
      if (title) return;
      
      const content = $(element).attr('content');
      if (content && content.length > 5) {
        title = content.trim();
      }
    });
  }
  
  // Parse year, make, model from title
  if (title) {
    // Extract year (4 digit number between 1900 and current year + 1)
    const currentYear = new Date().getFullYear();
    const yearMatch = title.match(/\b(19\d{2}|20\d{2})\b/);
    if (yearMatch && yearMatch[1]) {
      const parsedYear = parseInt(yearMatch[1], 10);
      if (parsedYear >= 1900 && parsedYear <= currentYear + 1) {
        year = parsedYear;
      }
    }
    
    // Extract make and model
    const commonMakes = [
      'acura', 'audi', 'bmw', 'buick', 'cadillac', 'chevrolet', 'chevy', 'chrysler', 
      'dodge', 'ford', 'gmc', 'honda', 'hyundai', 'infiniti', 'jaguar', 'jeep', 
      'kia', 'land rover', 'lexus', 'lincoln', 'maserati', 'mazda', 'mercedes-benz',
      'nissan', 'porsche', 'ram', 'subaru', 'tesla', 'toyota', 'volkswagen', 'volvo'
    ];
    
    for (const brand of commonMakes) {
      if (title.toLowerCase().includes(brand)) {
        make = formatBrandName(brand);
        
        // Try to extract model after the make
        const afterMake = title.toLowerCase().split(brand)[1];
        if (afterMake) {
          const modelMatch = afterMake.match(/^\s*([a-z0-9-]+)/i);
          if (modelMatch && modelMatch[1]) {
            model = formatModelName(modelMatch[1]);
          }
        }
        
        break;
      }
    }
  }
  
  // Look for structured data as fallback
  $('[itemprop="brand"], [itemprop="manufacturer"]').each((_, element) => {
    if (make) return;
    
    const itemPropMake = $(element).text().trim() || $(element).attr('content');
    if (itemPropMake) {
      make = itemPropMake;
    }
  });
  
  $('[itemprop="model"]').each((_, element) => {
    if (model) return;
    
    const itemPropModel = $(element).text().trim() || $(element).attr('content');
    if (itemPropModel) {
      model = itemPropModel;
    }
  });
  
  $('[itemprop="modelDate"], [itemprop="productionDate"], [itemprop="releaseDate"]').each((_, element) => {
    if (year) return;
    
    const itemPropYear = $(element).text().trim() || $(element).attr('content');
    if (itemPropYear) {
      const parsedYear = parseInt(itemPropYear, 10);
      if (!isNaN(parsedYear)) {
        year = parsedYear;
      }
    }
  });
  
  return { make, model, year };
}

function formatBrandName(brand: string): string {
  if (brand === 'bmw' || brand === 'gmc' || brand === 'vw') {
    return brand.toUpperCase();
  }
  
  if (brand.includes(' ')) {
    return brand.split(' ')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }
  
  return brand.charAt(0).toUpperCase() + brand.slice(1);
}

function formatModelName(model: string): string {
  return model.split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join('-');
}

function extractPrice($: cheerio.Root): number {
  let price = 0;
  
  // Try Nova Autoland's specific price selectors first
  $('.price, .vehicle-price, .final-price, [itemprop="price"]').each((_, element) => {
    if (price) return;
    
    const priceText = $(element).text().trim();
    if (priceText && priceText.includes('$')) {
      const priceMatch = priceText.match(/\$\s?(\d{1,3}(,\d{3})*(\.\d+)?)/);
      if (priceMatch && priceMatch[1]) {
        const parsedPrice = parseFloat(priceMatch[1].replace(/,/g, ''));
        if (!isNaN(parsedPrice)) {
          price = parsedPrice;
        }
      }
    }
  });
  
  // Fallback to more generic price extraction
  if (!price) {
    $('*:contains("$")').each((_, element) => {
      if (price) return;
      
      const text = $(element).text().trim();
      if (text.length > 30 || text.includes('msrp') || text.includes('starting at')) return;
      
      if (text && text.includes('$')) {
        const priceMatch = text.match(/\$\s?(\d{1,3}(,\d{3})*(\.\d+)?)/);
        if (priceMatch && priceMatch[1]) {
          const parsedPrice = parseFloat(priceMatch[1].replace(/,/g, ''));
          if (!isNaN(parsedPrice) && parsedPrice > 0 && parsedPrice < 500000) {
            price = parsedPrice;
          }
        }
      }
    });
  }
  
  return price;
}

function extractMileage($: cheerio.Root): number {
  let mileage = 0;
  
  // Try Nova Autoland's specific mileage selectors first
  $('.mileage, .vehicle-mileage, *:contains("miles"), *:contains("mileage")').each((_, element) => {
    if (mileage) return;
    
    const text = $(element).text().trim();
    const mileageMatch = 
      text.match(/(\d{1,3}(,\d{3})*)(\.\d+)?\s*(mi|miles|mil)/i) || 
      text.match(/mileage:?\s*(\d{1,3}(,\d{3})*)/i);
    
    if (mileageMatch && mileageMatch[1]) {
      const parsedMileage = parseInt(mileageMatch[1].replace(/,/g, ''), 10);
      if (!isNaN(parsedMileage)) {
        mileage = parsedMileage;
      }
    }
  });
  
  return mileage;
}

function extractColors($: cheerio.Root): { exteriorColor: string; interiorColor: string } {
  let exteriorColor = '';
  let interiorColor = '';
  
  // Extract exterior color
  $('*:contains("exterior color"), *:contains("ext. color"), *:contains("color:")').each((_, element) => {
    if (exteriorColor) return;
    
    const text = $(element).text();
    const colorMatch = text.match(/exterior\s*color:?\s*([a-z\s]+)/i) || 
                      text.match(/ext\.\s*color:?\s*([a-z\s]+)/i) ||
                      text.match(/color:?\s*([a-z\s]+)/i);
    if (colorMatch && colorMatch[1]) {
      exteriorColor = colorMatch[1].trim();
    }
  });
  
  // Extract interior color
  $('*:contains("interior color"), *:contains("int. color")').each((_, element) => {
    if (interiorColor) return;
    
    const text = $(element).text();
    const colorMatch = text.match(/interior\s*color:?\s*([a-z\s]+)/i) || 
                      text.match(/int\.\s*color:?\s*([a-z\s]+)/i);
    if (colorMatch && colorMatch[1]) {
      interiorColor = colorMatch[1].trim();
    }
  });
  
  return { exteriorColor, interiorColor };
}

function extractTechnicalDetails($: cheerio.Root): { bodyType: string; fuelType: string; transmission: string; drivetrain: string } {
  let bodyType = '';
  let fuelType = '';
  let transmission = '';
  let drivetrain = '';
  
  // Extract body type
  $('*:contains("body style"), *:contains("body type")').each((_, element) => {
    if (bodyType) return;
    
    const text = $(element).text();
    const bodyMatch = text.match(/body\s*(style|type):?\s*([a-z\s]+)/i);
    if (bodyMatch && bodyMatch[2]) {
      bodyType = bodyMatch[2].trim();
    }
  });
  
  // Extract fuel type
  $('*:contains("fuel"), *:contains("gas")').each((_, element) => {
    if (fuelType) return;
    
    const text = $(element).text();
    const fuelMatch = text.match(/fuel\s*type:?\s*([a-z\s]+)/i) || 
                      text.match(/fuel:?\s*([a-z\s]+)/i);
    if (fuelMatch && fuelMatch[1]) {
      fuelType = fuelMatch[1].trim();
    }
  });
  
  // Extract transmission
  $('*:contains("transmission")').each((_, element) => {
    if (transmission) return;
    
    const text = $(element).text();
    const transMatch = text.match(/transmission:?\s*([a-z0-9\s-]+)/i);
    if (transMatch && transMatch[1]) {
      transmission = transMatch[1].trim();
    }
  });
  
  // Extract drivetrain
  $('*:contains("drivetrain"), *:contains("drive type")').each((_, element) => {
    if (drivetrain) return;
    
    const text = $(element).text();
    const driveMatch = text.match(/drivetrain:?\s*([a-z0-9\s-]+)/i) || 
                       text.match(/drive\s*type:?\s*([a-z0-9\s-]+)/i);
    if (driveMatch && driveMatch[1]) {
      drivetrain = driveMatch[1].trim();
    }
  });
  
  return { bodyType, fuelType, transmission, drivetrain };
}

function extractDescription($: cheerio.Root): string {
  let description = '';
  
  const descriptionElement = $('[itemprop="description"], .vehicle-description, .description').first();
  if (descriptionElement.length) {
    description = descriptionElement.text().trim();
  }
  
  return description;
}

function extractImages($: cheerio.Root, baseUrl: string): string[] {
  const imageUrls: string[] = [];
  
  // Nova Autoland uses specific image selectors
  const imageSelectors = [
    '.vehicle-images img',
    '.gallery img',
    '.slider img',
    '.carousel img',
    '[itemprop="image"]',
    'img[src*="inventory"]',
    'img[src*="vehicle"]'
  ];
  
  // First look for images using specific selectors
  for (const selector of imageSelectors) {
    $(selector).each((_, element) => {
      const src = $(element).attr('src') || 
                 $(element).attr('data-src') || 
                 $(element).attr('data-lazy-src') || 
                 $(element).attr('data-original');
      
      if (src && !isPlaceholderImage(src)) {
        try {
          const fullImageUrl = new URL(src, baseUrl).toString();
          if (!imageUrls.includes(fullImageUrl)) {
            imageUrls.push(fullImageUrl);
          }
        } catch (e) {
          console.log(`Invalid image URL: ${src}`);
        }
      }
    });
    
    if (imageUrls.length > 0) {
      break;
    }
  }
  
  // If no images found with selectors, look for all images that might be vehicle photos
  if (imageUrls.length === 0) {
    $('img').each((_, element) => {
      const src = $(element).attr('src');
      if (src && !isPlaceholderImage(src)) {
        try {
          const fullImageUrl = new URL(src, baseUrl).toString();
          if (!imageUrls.includes(fullImageUrl)) {
            imageUrls.push(fullImageUrl);
          }
        } catch (e) {
          console.log(`Invalid image URL: ${src}`);
        }
      }
    });
  }
  
  // Filter and sort images to prioritize the best ones
  return filterAndSortImages(imageUrls);
}

function isPlaceholderImage(src: string): boolean {
  return (
    src.includes('data:image/svg+xml') || 
    src.includes('blank.gif') || 
    src.includes('placeholder') || 
    src.includes('no-image') ||
    src.includes('logo') ||
    src.includes('icon')
  );
}

function filterAndSortImages(imageUrls: string[]): string[] {
  // Filter out obviously bad images
  const filtered = imageUrls.filter(img => {
    const badPatterns = [
      'logo', 'badge', 'icon', 'button', 'sprite', 'trust',
      'carfax', 'svg', 'valuebadge', 'banner', 'certified',
      'footer', 'header', 'check-mark', 'checkmark'
    ];
    
    // Skip images with bad patterns
    if (badPatterns.some(pattern => img.toLowerCase().includes(pattern))) {
      return false;
    }
    
    // Only keep common image extensions
    return /\.(jpg|jpeg|png|webp)($|\?)/i.test(img.toLowerCase());
  });
  
  // Sort images to prioritize likely vehicle photos
  filtered.sort((a, b) => {
    // Prioritize images from certain paths
    const aIsHighQuality = a.includes('inventory') || a.includes('vehicle');
    const bIsHighQuality = b.includes('inventory') || b.includes('vehicle');
    
    if (aIsHighQuality && !bIsHighQuality) return -1;
    if (!aIsHighQuality && bIsHighQuality) return 1;
    
    // Deprioritize thumbnails and small images
    const aIsSmall = a.includes('thumb') || a.includes('small');
    const bIsSmall = b.includes('thumb') || b.includes('small');
    
    if (!aIsSmall && bIsSmall) return -1;
    if (aIsSmall && !bIsSmall) return 1;
    
    // Sort by likely sequence (lower numbers first)
    const aNumMatch = a.match(/(\d+)\.(jpg|jpeg|png|webp)$/i);
    const bNumMatch = b.match(/(\d+)\.(jpg|jpeg|png|webp)$/i);
    
    if (aNumMatch && bNumMatch) {
      return parseInt(aNumMatch[1], 10) - parseInt(bNumMatch[1], 10);
    }
    
    return 0;
  });
  
  return filtered;
}

function extractCarfaxUrl($: cheerio.Root, baseUrl: string): string | null {
  let carfaxUrl: string | null = null;
  
  $('a').each((_, element) => {
    if (carfaxUrl) return;
    
    const href = $(element).attr('href');
    const text = $(element).text().toLowerCase();
    
    if (href && (
      href.includes('carfax.com') || 
      text.includes('carfax') || 
      href.includes('vehicle-history') ||
      href.includes('history-report')
    )) {
      try {
        carfaxUrl = new URL(href, baseUrl).toString();
      } catch (e) {
        console.log(`Invalid Carfax URL: ${href}`);
      }
    }
  });
  
  return carfaxUrl;
}